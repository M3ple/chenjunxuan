1、Mybatis动态sql是做什么的？都有哪些动态sql？简述一下动态sql的执行原理？
Mybatis 动态 SQL ，可以让我们在 XML 映射文件内，以 XML 标签的形 式编写动态 SQL ，完成逻辑判断和动态拼接 SQL 的功能。
Mybatis 提供了 9 种动态 SQL 标签：<if/>、<choose/>、<when/>、<otherwise/>、<trim/>、<when/>、<set/>、<foreach/>、<bind/>。
其执行原理为，使用 OGNL 的表达式，从 SQL 参数对象中计算表达式的值,根据表达式的值动态拼接 SQL ，以此来完成动态 SQL 的功能。
2、Mybatis是否支持延迟加载？如果支持，它的实现原理是什么？
支持，原理：将sql分别拼装成两个执行语句，在使用对象的时候再去数据库查询所需数据
3、Mybatis都有哪些Executor执行器？它们之间的区别是什么？
Mybatis有三种基本的Executor执行器:
CachingExecutor、SimpleExecutor、ReuseExecutor、BatchExecutor。
作用范围：Executor的这些特点，都严格限制在SqlSession生命周期范围内。
CachingExecutor：Executor执行类是使用内存的，将数据保存到缓存中，这样可以有效的解决增删改查性能。缺点：缓存的作用域为mapper（namespace），所以同一个namespace的操作会影响到相同作用域下的缓存，这样不同的域对同一个表进行操作很有可能导致缓存中的数据不一样，出现问题。
SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。
ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map内，供下一次使用。简言之，就是重复使用Statement对象。
BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理。与JDBC批处理相同。
4、简述下Mybatis的一级、二级缓存（分别从存储结构、范围、失效场景。三个方面来作答）？
存储结构：一二级都是用的HashMap
范围：
	一级：同一个sqlSession
	二级：同一个mapper内
失效场景：
	一级：如果没有开启事务，每一次sql都是用的新的SqlSession，这时mybatis的一级缓存是失效的。
5、简述Mybatis的插件运行原理，以及如何编写一个插件？
在四大对象创建的时候
 1、每个创建出来的对象不是直接返回的，而是
      interceptorChain.pluginAll(parameterHandler);
 2、获取到所有的Interceptor（拦截器）（插件需要实现的接口）；
      调用interceptor.plugin(target);返回target包装后的对象
 3、插件机制，我们可以使用插件为目标对象创建一个代理对象；AOP（面向切面）
      我们的插件可以为四大对象创建出代理对象；
      代理对象就可以拦截到四大对象的每一个执行；
如何编写插件：
	1、intercept:在此实现自己的拦截逻辑，可从Invocation参数中拿到执行方法的对象，方法，方法参数，从而实现各种业务逻辑, 如下代码所示，从invocation中获取的statementHandler对象即为被代理对象，基于该对象，我们获取到了执行的原始SQL语句，以及prepare方法上的分页参数，并更改SQL语句为新的分页语句，最后调用invocation.proceed()返回结果。
	2、plugin：生成代理对象；
	3、setProperties：设置一些属性变量；